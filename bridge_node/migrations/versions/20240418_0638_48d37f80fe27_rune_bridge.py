"""rune_bridge

Revision ID: 48d37f80fe27
Revises: 5700ba4c4c88
Create Date: 2024-04-18 06:38:04.580680

"""
import decimal

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import types

# revision identifiers, used by Alembic.
revision = '48d37f80fe27'
down_revision = '5700ba4c4c88'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rune',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('bridge_id', sa.Integer(), nullable=False),
    sa.Column('n', Uint128(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('spaced_name', sa.Text(), nullable=False),
    sa.Column('symbol', sa.Text(), nullable=False),
    sa.Column('divisibility', sa.Integer(), nullable=False),
    sa.Column('turbo', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['bridge_id'], ['bridge.id'], name=op.f('fk_rune_bridge_id_bridge')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rune')),
    sa.UniqueConstraint('bridge_id', 'n', name='uq_rune_n')
    )
    op.create_table('incoming_btc_tx',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('bridge_id', sa.Integer(), nullable=False),
    sa.Column('tx_id', sa.Text(), nullable=False),
    sa.Column('vout', sa.Integer(), nullable=False),
    sa.Column('block_number', sa.Integer(), nullable=True),
    sa.Column('time', sa.Integer(), nullable=False),
    sa.Column('address', sa.Text(), nullable=False),
    sa.Column('amount_sat', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['bridge_id'], ['bridge.id'], name=op.f('fk_incoming_btc_tx_bridge_id_bridge')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_incoming_btc_tx_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_incoming_btc_tx')),
    sa.UniqueConstraint('bridge_id', 'tx_id', 'vout', name='uq_incoming_bitcoin_tx_id_vout')
    )
    op.create_table('rune_token_deposit',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('bridge_id', sa.Integer(), nullable=False),
    sa.Column('evm_block_number', sa.BigInteger(), nullable=True),
    sa.Column('evm_tx_hash', sa.Text(), nullable=True),
    sa.Column('evm_log_index', sa.Integer(), nullable=True),
    sa.Column('receiver_btc_address', sa.Text(), nullable=False),
    sa.Column('transferred_token_amount', Uint256(), nullable=False),
    sa.Column('net_rune_amount_raw', Uint128(), nullable=False),
    sa.Column('token_address', types.LargeBinary, nullable=False),
    sa.Column('rune_id', sa.Integer(), nullable=False),
    sa.Column('btc_tx_id', sa.Text(), nullable=True),
    sa.Column('finalized_psbt', sa.Text(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['bridge_id'], ['bridge.id'], name=op.f('fk_rune_token_deposit_bridge_id_bridge')),
    sa.ForeignKeyConstraint(['rune_id'], ['rune.id'], name=op.f('fk_rune_token_deposit_rune_id_rune')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rune_token_deposit')),
    sa.UniqueConstraint('evm_tx_hash', 'evm_log_index', name='uq_rune_token_deposit_tx_hash_log_index')
    )
    op.create_table('rune_deposit',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('bridge_id', sa.Integer(), nullable=False),
    sa.Column('tx_id', sa.Text(), nullable=False),
    sa.Column('vout', sa.Integer(), nullable=False),
    sa.Column('block_number', sa.Integer(), nullable=False),
    sa.Column('rune_number', Uint128(), nullable=False),
    sa.Column('rune_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('incoming_btc_tx_id', sa.Integer(), nullable=False),
    sa.Column('postage', sa.BigInteger(), nullable=False),
    sa.Column('transfer_amount_raw', Uint128(), nullable=False),
    sa.Column('net_amount_raw', Uint128(), nullable=False),
    sa.Column('evm_tx_hash', sa.Text(), nullable=True),
    sa.Column('accept_transfer_message_hash', sa.Text(), nullable=True),
    sa.Column('accept_transfer_signatures', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('accept_transfer_signers', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['bridge_id'], ['bridge.id'], name=op.f('fk_rune_deposit_bridge_id_bridge')),
    sa.ForeignKeyConstraint(['incoming_btc_tx_id'], ['incoming_btc_tx.id'], name=op.f('fk_rune_deposit_incoming_btc_tx_id_incoming_btc_tx')),
    sa.ForeignKeyConstraint(['rune_id'], ['rune.id'], name=op.f('fk_rune_deposit_rune_id_rune')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_rune_deposit_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rune_deposit')),
    sa.UniqueConstraint('bridge_id', 'tx_id', 'vout', 'rune_number', name='uq_rune_deposit_txid_vout_rune_number')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rune_deposit')
    op.drop_table('rune_token_deposit')
    op.drop_table('incoming_btc_tx')
    op.drop_table('rune')
    # ### end Alembic commands ###




class UintMixin:
    # Adapted from https://gist.github.com/miohtama/0f1900fb746941e24757bddaaef4d08b
    MAX_VALUE: int  # override in subclasses

    impl = types.NUMERIC
    cache_ok = True

    def process_result_value(self, value, dialect):
        if value is not None:
            return self._coerce_and_validate_uint(value)
        return None

    def process_bind_param(self, value, dialect):
        if isinstance(value, decimal.Decimal):
            return self._coerce_and_validate_uint(value)
        return value

    def _coerce_and_validate_uint(self, value):
        value = int(value)
        if value < 0 or value > self.MAX_VALUE:
            raise f"Value {value} is out of range for {self.__class__.__name__}"
        return value


class Uint256(UintMixin, types.TypeDecorator):
    MAX_VALUE = 2**256 - 1
    cache_ok = True


class Uint128(UintMixin, types.TypeDecorator):
    MAX_VALUE = 2**128 - 1
    cache_ok = True
